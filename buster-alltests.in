#!${buildout:executable}

import sys
import os
import contextlib
import subprocess
import logging
import pprint

logger = logging.getLogger('buster-alltests')


@contextlib.contextmanager
def run_server_and_slave():
    # From http://trodrigues.net/presentations/buster-ci/#/24
    server = subprocess.Popen([os.path.join('bin', 'buster-server'), '-v'],
                              stdout=subprocess.PIPE)
    logger.info(
        'Started buster.js server with pid %s' % server.pid)

    # Start Firefox slave
    slave = subprocess.Popen(
        ['${:firefox-bin}', '${:firefox-options}',
         'http://localhost:1111/capture'])
    logger.info(
        'Started a browser slave with pid %s' % slave.pid)

    yield server, slave

    # Shutdown the browser and server
    slave.terminate()
    slave.wait()
    logger.info(
        'Terminated browser slave with pid %s' % slave.pid)
    server.terminate()
    server.wait()
    logger.info(
        'Terminated buster.js server with pid %s' % server.pid)

def main():
    with run_server_and_slave() as (server, slave):
        # Wait for slave to be captured
        line = server.stdout.readline()
        while line != '':
            if line.startswith('Slave captured'):
                break
            line = server.stdout.readline()
        else:
            raise subprocess.CalledProcessError(
                'Server closed stdout without capturing a slave.')
    
        # Run the tests
        options = [option.strip() for option in """${options}""".split()
                   if option.strip()]
        eggs = [egg.strip() for egg in """${eggs}""".split() if egg.strip()]
        output = """${stdout}""".strip()
        if output and not os.path.isdir(output):
            os.makedirs(output)
        failures = []
        for egg in eggs:
            logger.info(
                'Lookinf for buster.js tests in %s' % egg)
            egg_dir = os.path.join('src', egg)
            for dirpath, dirnames, filenames in os.walk(os.path.join(
                'src', egg)):
                for filename in filenames:
                    if filename != 'buster.js':
                        continue
                    stdout = sys.stdout
                    if output:
                        result = dirpath[len(egg_dir):].strip('/').replace(
                            '/', '-') + '.xml'
                        stdout = open(os.path.join(output, result), 'w')
                    logger.info(
                        'Running buster.js tests in %s' % dirpath)
                    retcode = subprocess.call(
                        [os.path.join('bin', 'buster-test')] + options
                        + ['--config', os.path.join(dirpath, filename)]
                        + sys.argv[1:], stdout=stdout)
                    if retcode:
                        failures.append(dirpath)
                        logger.error(
                            'Failures in %s buster.js tests' % dirpath)
                    break

        return failures

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    failures = main()
    if failures:
        sys.exit('The following tests failed:\n%s' % 
                 '\n'.join(failures))
        
