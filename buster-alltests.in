#!${buildout:executable}

import sys
import os
import contextlib
import subprocess
import logging
import pprint

logger = logging.getLogger('buster-alltests')


@contextlib.contextmanager
def run_server_and_slave():
    # From http://trodrigues.net/presentations/buster-ci/#/24
    server = subprocess.Popen([os.path.join('bin', 'buster-server'), '-v'],
                              stdout=subprocess.PIPE)
    logger.info(
        'Started buster.js server with pid %s' % server.pid)

    # Start Firefox slave
    slave = subprocess.Popen(
        ['${:firefox-bin}', '${:firefox-options}',
         'http://localhost:1111/capture'])
    logger.info(
        'Started a browser slave with pid %s' % slave.pid)

    yield server, slave

    # Shutdown the browser and server
    slave.terminate()
    slave.wait()
    logger.info(
        'Terminated browser slave with pid %s' % slave.pid)
    server.terminate()
    server.wait()
    logger.info(
        'Terminated buster.js server with pid %s' % server.pid)

def main():
    with run_server_and_slave() as (server, slave):
        # Wait for slave to be captured
        line = server.stdout.readline()
        while line != '':
            if line.startswith('Slave captured'):
                break
            line = server.stdout.readline()
        else:
            raise subprocess.CalledProcessError(
                'Server closed stdout without capturing a slave.')

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    failures = main()
    if failures:
        sys.exit('The following tests failed:\n%s' % 
                 '\n'.join(failures))
        
